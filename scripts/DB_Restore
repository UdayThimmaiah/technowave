# Checking if PowerShell modules are installed
if (-not (Get-Module -ListAvailable -Name SqlServer)){
    #Install-Module -Name SqlServer -Force
    Install-Module -Name SqlServer -AllowClobber
    Install-Module -Name SqlServer
}
Import-Module SqlServer

# Reading Properties File
#$PropertyMapping = ConvertFrom-StringData (Get-Content "c:\011_Properties.properties" -Raw)
#$Database = $PropertyMapping."properties.main.databaseName"
#$BackupFile = $PropertyMapping."properties.main.backupFile"
#$ServerInstance = $PropertyMapping."properties.main.serverInstance"
#$DataPath = $PropertyMapping."properties.main.dataPath"
#$LogPath = $PropertyMapping."properties.main.logPath"
#$MemoryPath = $PropertyMapping."properties.main.memoryPath"

#$BackupFile = ${ENV:backupFile}


#$Database = "REPORTS-QC-TEST"
$Database =${ENV:databaseName}
$BackupFile = "\\192.168.168.49\LocalDBBackup\DB_RESTORE_AUTOMATION"
$BackupFileRootPath = $BackupFile
$ServerInstance = "192.168.168.26"
$DataPath = "D:\VitalAxis\DBFILES\DATA"
$LogPath = "D:\VitalAxis\DBFILES\LOG"
$MemoryPath = "D:\VitalAxis\DBFILES\FILESTREAM"


#$Database = "Test"
#$BackupFile = "\\VMOPSDB19\LocalDBBackup\UPM\VAUPM_Local_20220104042040.BAK"

$BackupFileRootPath = $BackupFileRootPath + "\" + $Database.Substring($Database.LastIndexOf('-') + 1)
$BackupFile = (Get-ChildItem "$BackupFileRootPath" | SELECT FullName, LastWriteTime | Sort-Object -Descending -Property 'LastWriteTime')[0].FullName


#Get Logical File Names
$DataFileLogicalName1 = ""
$DataFileLogicalName2 = ""
$LogFileLogicalName = ""
$MemoryFileLogicalName = ""

$Username = "Devopsappadmin"
$Password = "Qwe@123"

$SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
$Credentials = [PSCredential]::new("$Username", $SecurePassword)

#$Date = (Get-Date).ToString("dd-MM-yyyy-hh-mm-ss")






Write-Host ''
Write-Host "Database = $Database"


Write-Host 'Saving Back-up of selected tables'
# Backup Tables (Schema and Data)
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | Out-Null

# Array of Tables
$Tables = @('Hl7IntegrationMaster','IntegrationDistConfig','IntegrationMapping','L2LConfigurations','VaRules','W700Applications','W700Jobs','W700Properties')

# Output File
$InsertScriptFile_PK = ".\$($Database)_PK.sql"
$InsertScriptFile_FK = ".\$($Database)_FK.sql"

# Target Database Server
$Server = New-Object ('Microsoft.SqlServer.Management.Smo.Server') "$ServerInstance"

# Target Database
$DatabaseObject = $Server.databases["$Database"]

# New Scripter Object
$TableScripter = New-Object ('Microsoft.SqlServer.Management.Smo.Scripter')($Server)

# Define options for the Scripter
$TableScripter.Options.ScriptData = $True
$TableScripter.Options.ScriptSchema = $False
$TableScripter.Options.AppendToFile = $True
$TableScripter.Options.AllowSystemObjects = $False
$TableScripter.Options.ClusteredIndexes = $True
$TableScripter.Options.Indexes = $True
$TableScripter.Options.ToFileOnly = $True
$TableScripter.Options.Filename = $InsertScriptFile_PK

if(Test-Path -Path $InsertScriptFile_PK){
	Remove-Item -Path $InsertScriptFile_PK -Force
}

# Build out the Script for each Table in the PK Array
foreach ($Table in $Tables)
{
    $TableScripter.enumscript(@($DatabaseObject.tables[$Table]))
}


# Backup ExtAttrValue
$ExtAttrValue = Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "SELECT * from VaEntityExtAttributes WHERE ExtAttrName LIKE '%External.AppAuthenticationConfig%'" | Select-Object -ExpandProperty ExtAttrValue






#Backup-SqlDatabase -ServerInstance "$ServerInstance"  -Database "$Database" -BackupFile  "\\SERVER\bckpath\DBname-$($Date).bak"
Backup-SqlDatabase -ServerInstance "$ServerInstance"  -Database "$Database" -BackupFile  "\\$ServerInstance\d$\SQL-DB-BACKUP\$Database.bak" -Credential $Credentials

if(Get-SqlDatabase -ServerInstance "$ServerInstance" -Name "$Database" -Credential $Credentials -ErrorAction SilentlyContinue){
    #Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials -Query "DROP DATABASE [$Database]"
    Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials -Query "DECLARE @kill varchar(8000) = ''; SELECT @kill = @kill + 'kill ' + CONVERT(varchar(5), session_id) + ';' FROM sys.dm_exec_sessions WHERE database_id  = db_id('$Database') AND is_user_process = 1; EXEC(@kill);  "
    Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials -Query " DROP DATABASE [$Database];"
    Write-Host "Dropping Database $Database"
}
#Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials - $kill


$DataTable = Invoke-Sqlcmd -ServerInstance $ServerInstance -Username "$Username" -Password "$Password" "restore filelistonly from disk='$BackupFile'"

foreach ($r in $DataTable)
{
  if ($r.Type -eq "L")
  {
    $LogFileLogicalName = $r.LogicalName
  }
  elseif ($r.Type -eq "D")
  {
    if($DataFileLogicalName1 -eq ""){
        $DataFileLogicalName1 = $r.LogicalName
    }
    else{
        $DataFileLogicalName2 = $r.LogicalName
    }
  }
  elseif ($r.Type -eq "S"){
    $MemoryFileLogicalName = $r.LogicalName
  }
}

#Data File, Log File, Memory File Names
$DataFile = "$DataPath\$Database.mdf"
$DataFile2 = "$DataPath\$Database" + "_2.mdf"
$LogFile = "$LogPath\$Database.ldf"
$MemoryFile = "$MemoryPath\$Database" + "_InMem"

#$MemoryFile = "$MemoryPath\$MemoryFileLogicalName"


#Write-Host "--------------------"
#Write-Host $DataFileLogicalName1
#Write-Host $DataFileLogicalName2
#Write-Host $LogFileLogicalName
#Write-Host $MemoryFileLogicalName
#Write-Host "======================="

#Restore Database
$RelocateData = New-Object Microsoft.SqlServer.Management.Smo.RelocateFile($DataFileLogicalName1, $DataFile)
$RelocateData2 = New-Object Microsoft.SqlServer.Management.Smo.RelocateFile($DataFileLogicalName2, $DataFile2)
$RelocateLog = New-Object Microsoft.SqlServer.Management.Smo.RelocateFile($LogFileLogicalName, $LogFile)
if($MemoryFileLogicalName.length -gt 0){
    # Restore data, log, memory
    $RelocateMemory = New-Object Microsoft.SqlServer.Management.Smo.RelocateFile($MemoryFileLogicalName, $MemoryFile)

	if($DataFileLogicalName2.length -gt 0){
    	Restore-SqlDatabase -ServerInstance "$ServerInstance" -Database $Database -Credential $Credentials -BackupFile $BackupFile -RelocateFile @($RelocateData,$RelocateData2,$RelocateLog, $RelocateMemory)
    }
	else{
    	Restore-SqlDatabase -ServerInstance "$ServerInstance" -Database $Database -Credential $Credentials -BackupFile $BackupFile -RelocateFile @($RelocateData,$RelocateLog, $RelocateMemory)
    }
}
else{
    #Restote data, log
	if($DataFileLogicalName2.length -gt 0){
    	Restore-SqlDatabase -ServerInstance "$ServerInstance" -Database $Database -Credential $Credentials -BackupFile $BackupFile -RelocateFile @($RelocateData,$RelocateData2,$RelocateLog)
    }
	else{
    	Restore-SqlDatabase -ServerInstance "$ServerInstance" -Database $Database -Credential $Credentials -BackupFile $BackupFile -RelocateFile @($RelocateData,$RelocateLog)
    }
}

Write-Host "Database $Database Restored Successfully"




Write-Host 'Saving Back-up of selected tables (Foreign_Key Tables)'
# Backup Tables (Schema and Data)
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | Out-Null

# Array of Tables
$TablesFK = @('AssociatedAccounts','VaIntRecipient')

# Output File
$InsertScriptFile_FK = ".\$($Database)_FK.sql"

# Target Database Server
$Server = New-Object ('Microsoft.SqlServer.Management.Smo.Server') "$ServerInstance"

# Target Database
$DatabaseObject = $Server.databases["$Database"]

# New Scripter Object
$TableScripter = New-Object ('Microsoft.SqlServer.Management.Smo.Scripter')($Server)

# Define options for the Scripter
$TableScripter.Options.ScriptData = $True
$TableScripter.Options.ScriptSchema = $False
$TableScripter.Options.AppendToFile = $True
$TableScripter.Options.AllowSystemObjects = $False
$TableScripter.Options.ClusteredIndexes = $True
$TableScripter.Options.Indexes = $True
$TableScripter.Options.ToFileOnly = $True
$TableScripter.Options.Filename = $InsertScriptFile_FK


if(Test-Path -Path $InsertScriptFile_FK){
	Remove-Item -Path $InsertScriptFile_FK -Force
}

# Build out the Script for each Table in the FK Array
foreach ($Table in $TablesFK)
{
    $TableScripter.enumscript(@($DatabaseObject.tables[$Table]))
}



# Restore ExtAttrValue
Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "UPDATE VaEntityExtAttributes SET ExtAttrValue = '$ExtAttrValue' WHERE ExtAttrName = 'External.AppAuthenticationConfig'"







$NewDBUser = ($Database -Replace("-", "")) +'_RO'
$Password = "Va@2021"
$Database = $Database


$Mastersql = @"
USE [master]
GO
CREATE LOGIN [$NewDBUser] WITH PASSWORD='$Password', DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF
go
"@


$DBsql = @"
USE [$Database]

GO
CREATE USER [$NewDBUser] FOR LOGIN [$NewDBUser] WITH DEFAULT_SCHEMA=[dbo]
EXEC sp_addrolemember 'db_datareader', '$NewDBUser'
go
"@


if(Get-SqlLogin -ServerInstance "$ServerInstance" -Credential $Credentials  -LoginName "$NewDBUser" -ErrorAction SilentlyContinue){
    Write-Host "$NewDBUser Exists"

    Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [$($NewDBUser.Split('_')[0])] FROM LOGIN [$($NewDBUser.Split('_')[0])];EXEC sp_addrolemember 'db_owner', '$($NewDBUser.Split('_')[0])';"
    Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [$NewDBUser] FROM LOGIN [$NewDBUser];EXEC sp_addrolemember 'db_datareader', '$NewDBUser';"
    Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [TITANQC_RW] FROM LOGIN [TITANQC_RW];EXEC sp_addrolemember 'db_owner', 'TITANQC_RW';"
    Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [TITANQC_RO] FROM LOGIN [TITANQC_RO];EXEC sp_addrolemember 'db_datareader', 'TITANQC_RO';"
  Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [TITANSPRINT_RO] FROM LOGIN [TITANSPRINT_RO];EXEC sp_addrolemember 'db_datareader', 'TITANSPRINT_RO';"  
  Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [TITANQCADMIN] FROM LOGIN [TITANQCADMIN];EXEC sp_addrolemember 'db_owner', 'TITANQCADMIN';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\praveen.gowda] FROM LOGIN [AD\praveen.gowda];EXEC sp_addrolemember 'db_owner', 'AD\praveen.gowda';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\jyothi.gowda] FROM LOGIN [AD\jyothi.gowda];EXEC sp_addrolemember 'db_owner', 'AD\jyothi.gowda';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\suhas.handral] FROM LOGIN [AD\suhas.handral];EXEC sp_addrolemember 'db_owner', 'AD\suhas.handral';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\chiranjeevi.s] FROM LOGIN [AD\chiranjeevi.s];EXEC sp_addrolemember 'db_owner', 'AD\chiranjeevi.s';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\vishap.mittal] FROM LOGIN [AD\vishap.mittal];EXEC sp_addrolemember 'db_owner', 'AD\vishap.mittal';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\arindam.choudhury] FROM LOGIN [AD\arindam.choudhury];EXEC sp_addrolemember 'db_owner', 'AD\arindam.choudhury';"
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\jagadish.mj] FROM LOGIN [AD\jagadish.mj];EXEC sp_addrolemember 'db_owner', 'AD\jagadish.mj';"
  Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "CREATE USER [AD\manu.talwar] FROM LOGIN [AD\manu.talwar];EXEC sp_addrolemember 'db_owner', 'AD\manu.talwar';"
	 
}
else{
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $Mastersql
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $DBsql
}


$NewDBUser = $Database -Replace("-", "")
$Password = "Star@2021"
$Database = $Database


$Mastersql = @"
USE [master]
GO
CREATE LOGIN [$NewDBUser] WITH PASSWORD='$Password', DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF
go
"@


$DBsql = @"
USE [$Database]

GO
CREATE USER [$NewDBUser] FOR LOGIN [$NewDBUser] WITH DEFAULT_SCHEMA=[dbo]
EXEC sp_addrolemember 'db_owner', '$NewDBUser'
go
"@


if(Get-SqlLogin -ServerInstance "$ServerInstance" -Credential $Credentials  -LoginName "$NewDBUser" -ErrorAction SilentlyContinue){
    Write-Host "$NewDBUser Exists"
}
else{
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $Mastersql
	Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $DBsql
} 


#setting system base path from main build
$SystemBasepath="\\192.168.168.68\Website-Files\VitalAxis-IIS\$Database\"
$SystemScheduledReportBasePath="\\192.168.168.68\Website-Files\VitalAxis-IIS\$Database\WS\"
$VOBasePath="\\192.168.168.68\Website-Files\VitalAxis-IIS\$Database\Attachments\"


#SCript will change the basepath,ScheduledReportBasePath, VaRules Status in Database
$BasePathsql = @"
USE [$Database]
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue='$SystemBasepath' WHERE ExtAttrName = 'System.BasePath'
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue='$SystemScheduledReportBasePath' WHERE ExtAttrName = 'System.ScheduledReportBasePath'
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue='$VOBasePath' WHERE ExtAttrName = 'VOBasePath'
GO

UPDATE VaEntityExtAttributes SET ExtAttrValue2 = '$($Database.Replace('-', '').ToLower()).vitalaxis.com' WHERE ExtAttrName='System.DeploymentID'
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue2 = 'false' WHERE ExtAttrName LIKE '%External.AppAuthenticationConfig%'
GO
UPDATE Organizations SET IsADEnabled = 0 WHERE IsADEnabled=1
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue='false' WHERE ExtAttrName ='enable.user_auth_3'
GO

--UPDATE VaRules SET status=2 WHERE status=1
--GO

UPDATE VaEntityExtAttributes SET ExtAttrValue='false' WHERE ExtAttrName = 'Enable.APIReportGeneration'
GO
"@


#SCript will enable the service broker in Database
$ServiceBroker = @"
USE [$Database]
GO
ALTER DATABASE [$Database] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
Go
ALTER DATABASE [$Database] SET ENABLE_BROKER WITH ROLLBACK IMMEDIATE
Go
ALTER DATABASE [$Database] SET NEW_BROKER WITH ROLLBACK IMMEDIATE
GO
ALTER DATABASE [$Database] SET MULTI_USER WITH ROLLBACK IMMEDIATE
go
"@

#SCript will remove production URL's in Database
$ProdUrl = @"
USE [$Database]
 

UPDATE VaIntEvent SET EventData = NULL WHERE EVENTDATA IS NOT NULL

UPDATE Integrationmapping SET lookupValue = NULL WHERE (lookupValue LIKE '%http%' OR lookupValue LIKE '%https%' OR lookupValue LIKE '%FTP/SFTP%')
UPDATE Integrationmapping SET lookupId = NULL WHERE (lookupId LIKE '%http%' OR lookupId LIKE '%https%' OR lookupId LIKE '%FTP/SFTP%')

--UPDATE Integrationmapping SET lookupValue = NULL WHERE LEN(lookupValue) - LEN(REPLACE(LookupValue, '.', '')) = 3  AND lookupValue NOT LIKE '%[^.0-9]%'   -- We need to verify for IPAddress
--UPDATE Integrationmapping SET lookupId = NULL WHERE LEN(LookupId) - LEN(REPLACE(LookupId, '.', '')) = 3  AND lookupId NOT LIKE '%[^.0-9]%'   -- We need to verify for IPAddress

UPDATE Integrationmapping SET LookupValue = NULL 
WHERE  (CASE WHEN 
	(PARSENAME(LookupValue,1) NOT LIKE '%[^0-9]%' OR PARSENAME(LookupValue,1) = '*') AND
	(PARSENAME(LookupValue,2) NOT LIKE '%[^0-9]%' OR PARSENAME(LookupValue,2) = '*') AND
	(PARSENAME(LookupValue,3) NOT LIKE '%[^0-9]%' OR PARSENAME(LookupValue,3) = '*') AND
	(PARSENAME(LookupValue,4) NOT LIKE '%[^0-9]%' OR PARSENAME(LookupValue,4) = '*')
THEN 1 ELSE 0 END = 1)


--UPDATE Integrationmapping SET PropertyValue =    -- We need to verify for Users, Passwords, Agent
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%user%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%orderingphysician%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%PhysicianCode%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%Password%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%ReportFolder_NoAgent%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%agent%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%api%'

UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '%\%'
UPDATE Integrationmapping SET LookupValue = NULL WHERE lookupType like '/%'

UPDATE Hl7IntegrationMaster SET localOutboundFolder = NULL, localOutboundBckFolder = NULL, localSourceFolder = NULL, localProcessingFolder = NULL, localFailedFolder = NULL, localSuccessFolder = NULL, localIgnoredFolder = NULL 

UPDATE Hl7IntegrationMaster  SET groupId = '' WHERE Type = 'VitalCore'

UPDATE W700Properties SET PropertyValue = NULL WHERE (PropertyValue LIKE '%http%' OR PropertyValue LIKE '%https%' OR PropertyValue LIKE '%FTP/SFTP%')

--UPDATE W700Properties SET PropertyValue =    -- We need to verify for IPAddress
UPDATE W700Properties SET PropertyValue = NULL 
where  (CASE WHEN 
	(PARSENAME(PropertyValue,1) NOT LIKE '%[^0-9]%' OR PARSENAME(PropertyValue,1) = '*') AND
	(PARSENAME(PropertyValue,2) NOT LIKE '%[^0-9]%' OR PARSENAME(PropertyValue,2) = '*') AND
	(PARSENAME(PropertyValue,3) NOT LIKE '%[^0-9]%' OR PARSENAME(PropertyValue,3) = '*') AND
	(PARSENAME(PropertyValue,4) NOT LIKE '%[^0-9]%' OR PARSENAME(PropertyValue,4) = '*')
THEN 1 ELSE 0 END = 1)

--UPDATE W700Properties SET PropertyValue =    -- We need to verify for Users, Passwords, Agent
UPDATE W700Properties SET PropertyValue = NULL WHERE PropertyKey LIKE '%password%'
UPDATE W700Properties SET PropertyValue = NULL WHERE PropertyKey LIKE '%agent%'
UPDATE W700Properties SET PropertyValue = NULL WHERE PropertyKey LIKE '%API%'
UPDATE W700Properties SET PropertyValue = NULL WHERE PropertyKey LIKE '%user%'

UPDATE W700Properties SET PropertyValue = NULL WHERE Propertyvalue LIKE '\%'
UPDATE W700Properties SET PropertyValue = NULL WHERE Propertyvalue LIKE '/%'


UPDATE DistributionBatches SET Recipient = NULL, Data = NULL 
UPDATE HL7Integrationlog SET handlerdata = NULL, handlerdata2 = NULL 
 

UPDATE VaEntityExtAttributes SET ExtAttrValue = NULL,ExtAttrValue2 = NULL
WHERE ExtAttrName IN  ('zebra_archive_folder','zebra_destination_folder',
'zebra_jar_label_archive_folder','zebra_jar_label_destination_folder',
'zebra_jar_label_local_temp_folder','zebra_jar_label_template_file',
'zebra_local_temp_folder','zebra_template_file','network_printer_output_folder',
'cassette_archive_folder_name','cassette_dest_folder_name','cassette_local_temp_folder_name',
'leica_cassette_local_temp_folder','leica_slide_local_temp_folder')
"@

# Script will set to false the enable.user_auth_3 in Database
$UserAuth = @"
USE [$Database]
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue='false' WHERE ExtAttrName='enable.user_auth_3'
GO
"@


$UserMapping = @"
USE [$Database]
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue2='false' WHERE ExtAttrName='External.AppAuthenticationConfig'
GO
USE [$Database]
GO
UPDATE Organizations SET IsADEnabled=0 WHERE IsADEnabled=1
GO
USE [$Database]
GO
UPDATE VaEntityExtAttributes SET ExtAttrValue='false' WHERE ExtAttrName ='enable.user_auth_3'
GO
"@


# Command to execute above query
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $BasePathsql
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $ServiceBroker -ErrorAction Continue
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $ProdUrl
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $UserAuth
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Credential $Credentials  $UserMapping










# Script to Truncate data from the list of tables backed up before deleting old database
$DropScript = @"
--TRUNCATE TABLE [Hl7IntegrationMaster]
TRUNCATE TABLE [IntegrationDistConfig]
--TRUNCATE TABLE [VaEntityExtAttributes]
DELETE FROM [Hl7IntegrationMaster]
TRUNCATE TABLE [IntegrationMapping]
TRUNCATE TABLE AssociatedAccounts
--TRUNCATE TABLE [L2Lconfigurations]
DELETE FROM [L2Lconfigurations]
--TRUNCATE TABLE [VaRules]
TRUNCATE TABLE VaIntRecipient
DELETE FROM [VaRules]
TRUNCATE TABLE [W700Jobs]
--TRUNCATE TABLE [W700Applications]
DELETE FROM [W700Applications]
TRUNCATE TABLE [W700Properties]
"@

$FK_DisableTrigger = @"
ALTER TABLE [AssociatedAccounts] DISABLE TRIGGER [AssociatedAccounts_AspNet_SqlCacheNotification_Trigger]
ALTER TABLE [AssociatedAccounts] DISABLE TRIGGER [OWNERSLABUPDATETRIGGER]
GO
"@

$FK_EnableTrigger = @"
ALTER TABLE [AssociatedAccounts] ENABLE TRIGGER [AssociatedAccounts_AspNet_SqlCacheNotification_Trigger]
ALTER TABLE [AssociatedAccounts] ENABLE TRIGGER [OWNERSLABUPDATETRIGGER]
GO
"@

Write-Host 'Truncating data from the list of tables backed up before deleting old database'
# Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "$DropScript"

Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "TRUNCATE TABLE [IntegrationDistConfig]"
# [System.Array] $VaEntityExtAttributes = Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "SELECT EntityId, EntityType, ExtAttrName, ExtAttrValue2 FROM VaEntityExtAttributes" | Select-Object -ExpandProperty EntityId
# foreach($VaEntityExtAttribute in $VaEntityExtAttributes){
# 	Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "DELETE FROM VaEntityExtAttributes WHERE EntityId = $VaEntityExtAttribute"
# }
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "DELETE FROM [Hl7IntegrationMaster]"
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "TRUNCATE TABLE [IntegrationMapping]"
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "TRUNCATE TABLE AssociatedAccounts"
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "DELETE FROM [L2Lconfigurations]"
Invoke-Sqlcmd -ServerInstance "$ServerInstance" -Database "$Database" -Credential $Credentials -Query "TRUNCATE TABLE VaIntRecipient"
[System.Array] $VaRules = Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "SELECT RuleId, RuleName FROM VaRules" | Select-Object -ExpandProperty RuleId
foreach($VaRule in $VaRules){
	Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "DELETE FROM VaRules WHERE RuleId = $VaRule"
}
[System.Array] $W700Jobs = Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "SELECT JobId, JobName FROM W700Jobs" | Select-Object -ExpandProperty JobId
foreach($W700Job in $W700Jobs){
	Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "DELETE FROM W700Jobs WHERE JobId = $W700Job"
}
[System.Array] $W700Applications = Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "SELECT ApplicationId, Name FROM W700Applications" | Select-Object -ExpandProperty ApplicationId
foreach($W700Application in $W700Applications){
	Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "DELETE FROM W700Applications WHERE ApplicationId = $W700Application"
}
[System.Array] $W700Properties = Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "SELECT PropertyId, OwnerId, OwnerType, PrefixType, PropertyKey FROM W700Properties" | Select-Object -ExpandProperty PropertyId
foreach($W700Property in $W700Properties){
	Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -Query "DELETE FROM W700Properties WHERE PropertyId = $W700Property"
}

# Execute Generated SQL Script to Insert Backed-up Data 
Write-Host 'Restoring Backed-up tables'
Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -DisableVariables -InputFile $InsertScriptFile_PK;
#Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -DisableVariables -InputFile $FK_DisableTrigger;
Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -DisableVariables -InputFile $InsertScriptFile_FK -ErrorAction Continue;
#Invoke-Sqlcmd -ServerInstance $ServerInstance -Database $Database -Credential $Credentials -DisableVariables -InputFile $FK_EnableTrigger;

#Remove-Item -Path $InsertScriptFile_PK -Force
#Remove-Item -Path $InsertScriptFile_FK -Force







# WorklistIDs
$WorklistIDs = @"
DECLARE @WorklistIDs TABLE(ID BIGINT) 
INSERT INTO @WorklistIDs(ID)
SELECT ID FROM OrganizationCustomWorklist WHERE IsActive=1 AND type='worklist'
UPDATE OrganizationCustomWorklist SET isactive=0 WHERE ID in (SELECT ID FROM @WorklistIDs)
EXEC [dbo].[Job_PopulateCasesWorkList]
UPDATE OrganizationCustomWorklist SET isactive=1 WHERE ID in (SELECT ID FROM @WorklistIDs)
EXEC [dbo].[Job_PopulateCasesWorkList]
"@

Write-Host 'Running WorklistIDs Update Script'
Invoke-Sqlcmd -ServerInstance $ServerInstance -Database "$Database" -Credential $Credentials -Query $WorklistIDs








# GUID Masking
$GuidMaskingScript = @"

-- DROP TABLE [DeploymentMaskCodes]


IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE name = 'DeploymentMaskCodes' AND xtype='U')    
BEGIN
	CREATE TABLE [DeploymentMaskCodes]
	(
		Id BIGINT IDENTITY(1,1),
		DeploymentName VARCHAR(50),
		DatabaseName VARCHAR(100),
		MaskingText	NVARCHAR(16),
		CreatedDate	DATETIME
	);

	ALTER TABLE DeploymentMaskCodes ADD CONSTRAINT [PK_DeploymentMaskCodes_Id] PRIMARY KEY (Id);
	
	ALTER TABLE DeploymentMaskCodes ADD CONSTRAINT [DF_DeploymentMaskCodes_CreatedDate] DEFAULT (GETDATE()) FOR CreatedDate

	ALTER TABLE DeploymentMaskCodes ADD CONSTRAINT [UNQ_DeploymentMaskCodes_DatabaseName] UNIQUE (DatabaseName);
	
	ALTER TABLE DeploymentMaskCodes ADD CONSTRAINT [UNQ_DeploymentMaskCodes_MaskingText] UNIQUE (MaskingText);
END
GO


IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0001') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('STORM','BRIGHT-STORM','ACED0001',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0002') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('INFO','DEPLOYMENT-QC-INFO','ACED0002',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0003') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','TITAN-DEV-BCM','ACED0003',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0004') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','TITAN-DEV-IMP','ACED0004',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0005') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LABS','TITAN-DEV-LABS','ACED0005',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0006') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','TITAN-DEV-LIS','ACED0006',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0007') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS_PATHQAQC','TITAN-DEV-LIS_PATHQAQC','ACED0007',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0008') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('REPORTS','TITAN-DEV-LIS-REPORTS','ACED0008',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0009') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MIRACA','TITAN-DEV-MIRACA','ACED0009',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0010') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS','TITAN-DEV-MYLIS','ACED0010',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0011') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('PLUS','TITAN-DEV-PLUS','ACED0011',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0012') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','TITAN-DEV-QUEST','ACED0012',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0013') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','TITAN-DEV-SAGIS','ACED0013',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0014') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','TITAN-DEV-TLA','ACED0014',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0015') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','TITAN-DEV-UPM','ACED0015',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0016') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','TITAN-DEV-VACONFIG','ACED0016',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0017') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','TITAN-DEV-VAPULSE','ACED0017',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0018') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','TITAN-DEV-VPLABS','ACED0018',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0019') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','TITAN-QC-BCM','ACED0019',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0020') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DEMO','TITAN-QC-DEMO','ACED0020',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0021') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','TITAN-QC-IMP','ACED0021',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0022') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TEST','TITAN-QC-LABS-TEST','ACED0022',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0023') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','TITAN-QC-LIS','ACED0023',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0024') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('REPORTS','TITAN-QC-LIS-REPORTS','ACED0024',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0025') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TEST','TITAN-QC-LIS-TEST','ACED0025',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0026') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MIRACA','TITAN-QC-MIRACA','ACED0026',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0027') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS','TITAN-QC-MYLIS','ACED0027',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0028') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS_OLD','TITAN-QC-MYLIS_OLD','ACED0028',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0029') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('PLUS','TITAN-QC-PLUS','ACED0029',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0030') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('PULSE','TITAN-QC-PULSE','ACED0030',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0031') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','TITAN-QC-QUEST','ACED0031',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0032') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','TITAN-QC-SAGIS','ACED0032',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0033') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','TITAN-QC-TLA','ACED0033',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0034') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','TITAN-QC-UPM','ACED0034',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0035') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','TITAN-QC-VACONFIG','ACED0035',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0036') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','TITAN-QC-VPLABS','ACED0036',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0037') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','TITAN-SPRINT-BCM','ACED0037',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0038') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','TITAN-SPRINT-IMP','ACED0038',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0039') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DATA','TITAN-SPRINT-INTEGRATION-DATA','ACED0039',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0040') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','TITAN-SPRINT-LIS','ACED0040',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0041') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('FUSIONAUTH','TITAN-SPRINT-LIS-FUSIONAUTH','ACED0041',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0042') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS','TITAN-SPRINT-MYLIS','ACED0042',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0043') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','TITAN-SPRINT-QUEST','ACED0043',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0044') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','TITAN-SPRINT-SAGIS','ACED0044',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0045') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','TITAN-SPRINT-TLA','ACED0045',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0046') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','TITAN-SPRINT-UPM','ACED0046',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0047') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','TITAN-SPRINT-VACONFIG','ACED0047',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0048') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VALABS','TITAN-SPRINT-VALABS','ACED0048',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0049') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','TITAN-SPRINT-VAPULSE','ACED0049',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0050') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','TITAN-SPRINT-VPLABS','ACED0050',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0051') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','TITAN-TEMP-THXVAR','ACED0051',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0052') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DESK','VITAL-QC-DESK','ACED0052',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0053') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','VITAL-QC-LIS','ACED0053',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0054') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','VITAL-QC-QUEST','ACED0054',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0055') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','VITAL-QC-SAGIS','ACED0055',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0056') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','VITAL-QC-THX','ACED0056',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0057') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','VITAL-QC-THXVAR','ACED0057',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0058') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','VITAL-QC-TLA','ACED0058',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0059') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','VITAL-QC-UPM','ACED0059',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0060') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','VITAL-QC-VACONFIG','ACED0060',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0061') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','VITAL-QC-VAPULSE','ACED0061',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0062') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','VITAL-QC-VPLABS','ACED0062',GETDATE()) END;

IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0063') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','00THX_PA','ACED0063',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0064') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAARCHIVES','AVIOR-QC-VAARCHIVES','ACED0064',GETDATE()) END;
--IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0065') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('STORM','BRIGHT-STORM','ACED0065',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0066') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DevLocal','Core_DB_VitalCoreDB-DevLocal','ACED0066',GETDATE()) END;
--IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0067') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('INFO','DEPLOYMENT-QC-INFO','ACED0067',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0068') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('CPS','ELIXIER-DEV-CPS','ACED0068',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0069') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('CPS','ELIXIER-QC-CPS','ACED0069',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0070') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','FLEX-REPORTS-LIS','ACED0070',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0071') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','INT-HUB-LIS','ACED0071',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0072') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','INT-HUB-THX','ACED0072',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0073') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','INT-HUB-THXVAR','ACED0073',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0074') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','INT-HUB-UPM','ACED0074',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0075') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','INT-HUB-VACONFIG','ACED0075',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0076') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','INT-QC-BCM','ACED0076',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0077') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','INT-QC-IMP','ACED0077',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0078') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LABS','INT-QC-LABS','ACED0078',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0079') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','INT-QC-LIS','ACED0079',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0080') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MIRACA','INT-QC-MIRACA','ACED0080',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0081') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('PLUS','INT-QC-PLUS','ACED0081',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0082') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','INT-QC-QUEST','ACED0082',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0083') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','INT-QC-SAGIS','ACED0083',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0084') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','INT-QC-THX','ACED0084',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0085') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','INT-QC-THXVAR','ACED0085',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0086') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','INT-QC-TLA','ACED0086',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0087') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','INT-QC-UPM','ACED0087',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0088') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','INT-QC-VACONFIG','ACED0088',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0089') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','INT-QC-VAPULSE','ACED0089',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0090') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','INT-QC-VPLABS','ACED0090',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0091') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS_11mar2022','INT-TEMP-LIS_11mar2022','ACED0091',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0092') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','JUPITER-DEV-BCM','ACED0092',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0093') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','JUPITER-DEV-LIS','ACED0093',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0094') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS','JUPITER-DEV-MYLIS','ACED0094',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0095') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','JUPITER-DEV-QUEST','ACED0095',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0096') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','JUPITER-DEV-SAGIS','ACED0096',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0097') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','JUPITER-DEV-THX','ACED0097',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0098') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','JUPITER-DEV-THXVAR','ACED0098',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0099') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','JUPITER-DEV-TLA','ACED0099',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0100') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','JUPITER-DEV-UPM','ACED0100',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0101') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','JUPITER-DEV-VACONFIG','ACED0101',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0102') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','JUPITER-DEV-VAPULSE','ACED0102',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0103') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','JUPITER-DEV-VPLABS','ACED0103',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0104') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','JUPITER-QC-BCM','ACED0104',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0105') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','JUPITER-QC-LIS','ACED0105',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0106') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS','JUPITER-QC-MYLIS','ACED0106',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0107') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','JUPITER-QC-QUEST','ACED0107',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0108') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','JUPITER-QC-SAGIS','ACED0108',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0109') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('STORM','JUPITER-QC-STORM','ACED0109',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0110') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','JUPITER-QC-THX','ACED0110',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0111') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','JUPITER-QC-THXVAR','ACED0111',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0112') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','JUPITER-QC-TLA','ACED0112',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0113') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','JUPITER-QC-UPM','ACED0113',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0114') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','JUPITER-QC-VACONFIG','ACED0114',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0115') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','JUPITER-QC-VAPULSE','ACED0115',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0116') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','JUPITER-QC-VPLABS','ACED0116',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0117') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','LIS_LOCAL_SP5_LABS','ACED0117',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0118') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','LIS_THX_L2L_CP_DEV','ACED0118',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0119') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','LIS_THX_L2L_CP_QC','ACED0119',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0120') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','NIPT_live','ACED0120',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0121') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','NIPT_qa','ACED0121',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0122') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DX','PEGASUS-QC-DX','ACED0122',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0123') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('ORG','REPORTS-TEMPLATE-ORG','ACED0123',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0124') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','STEMS_Local_Live','ACED0124',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0125') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','stems_qa','ACED0125',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0126') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','stems_qa1','ACED0126',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0127') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','THX_PA','ACED0127',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0128') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','VITALSTATS-SPRINT-THX','ACED0128',GETDATE()) END;

IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0129') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','REPORTS-QC-BCM','ACED0129',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0130') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','VITAL-QC-BCM','ACED0130',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0131') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LISMDM','TITAN-SPRINT-LISMDM','ACED0131',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0132') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','VAPNX_Local','ACED0132',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0133') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCMTEST','TITAN-DEV-BCMTEST','ACED0133',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0134') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LISVO','VITAL-DEV-LISVO','ACED0134',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0135') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLAVO','VITAL-DEV-TLAVO','ACED0135',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0136') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABSVO','VITAL-DEV-VPLABSVO','ACED0136',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0137') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','00_LIS','ACED0137',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0138') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','SAGIS_Data','ACED0138',GETDATE()) END;

IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0139') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MONITORING','AVIOR-QC-MONITORING','ACED0139',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0140') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DEV','P4C-DEV','ACED0140',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0141') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','P4-DEV-IMP','ACED0141',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0142') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','P4-DEV-LIS','ACED0142',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0143') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','P4-DEV-THX','ACED0143',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0144') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXADMIN','P4-DEV-THXADMIN','ACED0144',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0145') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('FusionAuth','P4-DEV-THX-FusionAuth','ACED0145',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0146') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','P4-DEV-THXVAR','ACED0146',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0147') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','P4PORTAL-DEV-LIS','ACED0147',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0148') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','P4-QC-IMP','ACED0148',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0149') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('NYR','P4-QC-NYR','ACED0149',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0150') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','P4-QC-THX','ACED0150',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0151') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXADMIN','P4-QC-THXADMIN','ACED0151',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0152') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','P4-QC-THXVAR','ACED0152',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0153') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','P4-QC-VACONFIG','ACED0153',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0154') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','P4-QC-VAPULSE','ACED0154',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0155') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','P4-SPRINT-THX','ACED0155',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0156') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','P4-SPRINT-THXVAR','ACED0156',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0157') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','P4-SPRINT-VACONFIG','ACED0157',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0158') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VAPULSE','P4-SPRINT-VAPULSE','ACED0158',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0159') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','P4-TEST-IMP','ACED0159',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0160') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','P4-TEST-THX','ACED0160',GETDATE()) END;
--IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0161') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','REPORTS-QC-BCM','ACED0161',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0162') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('DEMO','REPORTS-QC-DEMO','ACED0162',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0163') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('IMP','REPORTS-QC-IMP','ACED0163',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0164') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LABS','REPORTS-QC-LABS','ACED0164',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0165') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','REPORTS-QC-LIS','ACED0165',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0166') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MIRACA','REPORTS-QC-MIRACA','ACED0166',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0167') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS','REPORTS-QC-MYLIS','ACED0167',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0168') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('PLUS','REPORTS-QC-PLUS','ACED0168',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0169') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','REPORTS-QC-QUEST','ACED0169',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0170') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('SAGIS','REPORTS-QC-SAGIS','ACED0170',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0171') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','REPORTS-QC-THX','ACED0171',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0172') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','REPORTS-QC-THXVAR','ACED0172',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0173') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','REPORTS-QC-TLA','ACED0173',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0174') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','REPORTS-QC-UPM','ACED0174',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0175') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','REPORTS-QC-VACONFIG','ACED0175',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0176') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','REPORTS-QC-VPLABS','ACED0176',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0177') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM','SUPPORT-QC-BCM','ACED0177',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0178') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','SUPPORT-QC-LIS','ACED0178',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0179') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('QUEST','SUPPORT-QC-QUEST','ACED0179',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0180') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','SUPPORT-QC-THX','ACED0180',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0181') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THXVAR','SUPPORT-QC-THXVAR','ACED0181',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0182') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TLA','SUPPORT-QC-TLA','ACED0182',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0183') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM','SUPPORT-QC-UPM','ACED0183',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0184') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VACONFIG','SUPPORT-QC-VACONFIG','ACED0184',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='ACED0185') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('VPLABS','SUPPORT-QC-VPLABS','ACED0185',GETDATE()) END;
GO
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0001') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('0405','DFS-0405','FACE0001',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0002') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','dpa_dpa','FACE0002',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0003') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','MYLIS_Archive_Source','FACE0003',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0004') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','SSISDB','FACE0004',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0005') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','VABCM_Local','FACE0005',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0006') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','VALIS_Local_Test','FACE0006',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0007') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','VALIS_TEST','FACE0007',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0008') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('BCM_Backup','VALive-BCM_Backup','FACE0008',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0009') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('MYLIS_Backup','VALive-MYLIS_Backup','FACE0009',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0010') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('Quest_Nov20','VALive-Quest_Nov20','FACE0010',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0011') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('UPM_Backup','VALive-UPM_Backup','FACE0011',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0012') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','VAMDM_Local','FACE0012',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0013') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','VAUPM_Source','FACE0013',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0014') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('','CRBSFTPLOGS350','FACE0014',GETDATE()) END;
--IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0015') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('LIS','FLEX-REPORTS-LIS','FACE0015',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0016') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('THX','P4-WCFTOWEBAPI-THX','FACE0016',GETDATE()) END;
--IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0017') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('ORG','REPORTS-TEMPLATE-ORG','FACE0017',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0018') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('reports','Valocal-reports','FACE0018',GETDATE()) END;
IF NOT EXISTS (SELECT 1 FROM [DeploymentMaskCodes] WHERE maskingText ='FACE0019') BEGIN INSERT INTO [DeploymentMaskCodes] (deploymentName,DatabaseName,maskingText,createdDate) VALUES ('TEST','VITALDX-ADMIN-TEST','FACE0019',GETDATE()) END;
GO
 


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID (N'[usp_GUIDMasking]', 'P') IS NOT NULL 
    DROP PROCEDURE [dbo].[usp_GUIDMasking];
GO
-- ====================================================================================
-- Author:		<Vinay Kumar S>
-- Create date: <01-Mar-2023>
-- Description:	<To Update GUID's in Local,Sprint, Stage, Beta deployments>
-- ====================================================================================
CREATE PROCEDURE [dbo].[usp_GUIDMasking]
(
	@DatabaseName VARCHAR(100)
)
AS
BEGIN
	
	SET NOCOUNT ON;
 
	DECLARE 
		@MaskingText NVARCHAR(8)

	SELECT @MaskingText = maskingText FROM DeploymentMaskCodes WHERE DatabaseName = @DatabaseName;

	DECLARE @Accounts TABLE(AccountID BIGINT,MaskingTextData NVARCHAR(10))
	DECLARE @Organizations TABLE(OrganizationID BIGINT,MaskingTextData NVARCHAR(10))
	DECLARE @Users TABLE(UserID BIGINT,MaskingTextData NVARCHAR(10))

	INSERT INTO @Accounts(AccountID,MaskingTextData)
	select AccountID,CONCAT(Substring(@MaskingText,1,4),Substring(SUBSTRING(data,1,charindex('-',data)-1),1,4)) from (
	select AccountID,cast(newid() as nvarchar(100)) as data from Accounts where SourceGUID is not null) as n

	INSERT INTO @Organizations(OrganizationID,MaskingTextData)
	select organizationid,CONCAT(Substring(@MaskingText,1,4),Substring(SUBSTRING(data,1,charindex('-',data)-1),1,4)) from (
	select organizationid,cast(newid() as nvarchar(100)) as data from organizations where SourceGUID is not null) as n

	INSERT INTO @Users(UserID,MaskingTextData)
	select UserID,CONCAT(Substring(@MaskingText,1,4),Substring(SUBSTRING(data,1,charindex('-',data)-1),1,4)) from (
	select Userid,cast(newid() as nvarchar(100)) as data from Users where SourceGUID is not null) as n
	
	IF OBJECT_ID('L2LCONFIGURATIONSUPDTRIGGER') IS NOT NULL 
	BEGIN
		DISABLE TRIGGER [L2LCONFIGURATIONSUPDTRIGGER] ON L2LConfigurations
	END
	IF OBJECT_ID('ORGANIZATIONSUPDTRIGGER') IS NOT NULL 
	BEGIN
		DISABLE TRIGGER [ORGANIZATIONSUPDTRIGGER] ON Organizations
	END
	IF OBJECT_ID('ACCOUNTSUPDTRIGGER') IS NOT NULL 
	BEGIN
		DISABLE TRIGGER [ACCOUNTSUPDTRIGGER] ON Accounts
	END
	IF OBJECT_ID('USERSUPDTRIGGER') IS NOT NULL 
	BEGIN
		DISABLE TRIGGER [USERSUPDTRIGGER] ON Users
	END

	IF (@MaskingText IS NOT NULL) 
	BEGIN
		IF OBJECT_ID('L2LConfigurations') IS NOT NULL
		BEGIN
			UPDATE LC
				SET LabAGUID = CASE WHEN LabAGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(LabAGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(LabAGUID AS NVARCHAR(60))), LEN(CAST(LabAGUID AS NVARCHAR(60)))))) END,
					LabBGUID = CASE WHEN LabBGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(LabBGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(LabBGUID AS NVARCHAR(60))), LEN(CAST(LabBGUID AS NVARCHAR(60)))))) END
			FROM L2LConfigurations LC
				INNER JOIN Accounts A on A.ExternalGUID = LC.LabAGUID
				INNER JOIN Accounts B on B.ExternalGUID = LC.LabBGUID
			WHERE A.SourceGUID IS  NULL AND B.SourceGUID IS   NULL

			UPDATE LC
				SET LabAGUID = CASE WHEN LabAGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(AA.MaskingTextData, SUBSTRING(CAST(LabAGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(LabAGUID AS NVARCHAR(60))), LEN(CAST(LabAGUID AS NVARCHAR(60)))))) END,
					LabBGUID = CASE WHEN LabBGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(BB.MaskingTextData, SUBSTRING(CAST(LabBGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(LabBGUID AS NVARCHAR(60))), LEN(CAST(LabBGUID AS NVARCHAR(60)))))) END
			FROM L2LConfigurations LC
				INNER JOIN Accounts A on A.ExternalGUID = LC.LabAGUID
				INNER JOIN Accounts B on B.ExternalGUID = LC.LabBGUID
				INNER JOIN @Accounts AS AA ON AA.AccountID = A.AccountID
				INNER JOIN @Accounts AS BB ON BB.AccountID = B.AccountID
				WHERE A.SourceGUID IS NOT NULL AND B.SourceGUID IS NOT  NULL
		END

		--#########################################################################--

		UPDATE Organizations
			SET [GUID] = CASE WHEN [GUID] IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST([GUID] AS NVARCHAR(60)), CHARINDEX('-', CAST([GUID] AS NVARCHAR(60))), LEN(CAST([GUID] AS NVARCHAR(60)))))) END 
				,ExternalOrgGUID = CASE WHEN ExternalOrgGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(ExternalOrgGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalOrgGUID AS NVARCHAR(60))), LEN(CAST(ExternalOrgGUID AS NVARCHAR(60)))))) END
				,ExternalPracticeGUID = CASE WHEN ExternalPracticeGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(ExternalPracticeGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalPracticeGUID AS NVARCHAR(60))), LEN(CAST(ExternalPracticeGUID AS NVARCHAR(60)))))) END
				WHERE SourceGUID IS NULL	;

			UPDATE Org
			SET [GUID] = CASE WHEN [GUID] IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST([GUID] AS NVARCHAR(60)), CHARINDEX('-', CAST([GUID] AS NVARCHAR(60))), LEN(CAST([GUID] AS NVARCHAR(60)))))) END 
				,ExternalOrgGUID = CASE WHEN ExternalOrgGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST(ExternalOrgGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalOrgGUID AS NVARCHAR(60))), LEN(CAST(ExternalOrgGUID AS NVARCHAR(60)))))) END
				,ExternalPracticeGUID = CASE WHEN ExternalPracticeGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST(ExternalPracticeGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalPracticeGUID AS NVARCHAR(60))), LEN(CAST(ExternalPracticeGUID AS NVARCHAR(60)))))) END
			FROM Organizations Org INNER JOIN @Organizations AS O ON Org.OrganizationID = O.OrganizationID
			WHERE SourceGUID IS NOT NULL	;
	
		--#########################################################################--

		UPDATE Accounts
			SET AccountGUID = CASE WHEN AccountGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(AccountGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(AccountGUID AS NVARCHAR(60))), LEN(CAST(AccountGUID AS NVARCHAR(60)))))) END
				,ExternalGUID = CASE WHEN ExternalGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(ExternalGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalGUID AS NVARCHAR(60))), LEN(CAST(ExternalGUID AS NVARCHAR(60)))))) END
		WHERE SourceGUID IS NULL;

		UPDATE Act
			SET AccountGUID = CASE WHEN AccountGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST(AccountGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(AccountGUID AS NVARCHAR(60))), LEN(CAST(AccountGUID AS NVARCHAR(60)))))) END
				,ExternalGUID = CASE WHEN ExternalGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST(ExternalGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalGUID AS NVARCHAR(60))), LEN(CAST(ExternalGUID AS NVARCHAR(60)))))) END
		FROM Accounts AS Act INNER JOIN @Accounts AS A ON Act.AccountID = A.AccountID
		WHERE SourceGUID IS NOT NULL	;
		--#########################################################################--

		UPDATE Users
			SET [GUID] = CASE WHEN [GUID] IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST([GUID] AS NVARCHAR(60)), CHARINDEX('-', CAST([GUID] AS NVARCHAR(60))), LEN(CAST([GUID] AS NVARCHAR(60)))))) END
			,ExternalUserGUID = CASE WHEN ExternalUserGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(@MaskingText, SUBSTRING(CAST(ExternalUserGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalUserGUID AS NVARCHAR(60))), LEN(CAST(ExternalUserGUID AS NVARCHAR(60)))))) END
		WHERE SourceGUID IS NULL;

		UPDATE Users
			SET [GUID] = CASE WHEN [GUID] IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST([GUID] AS NVARCHAR(60)), CHARINDEX('-', CAST([GUID] AS NVARCHAR(60))), LEN(CAST([GUID] AS NVARCHAR(60)))))) END
			,ExternalUserGUID = CASE WHEN ExternalUserGUID IS NOT NULL THEN CONVERT(UNIQUEIDENTIFIER, CONCAT(MaskingTextData, SUBSTRING(CAST(ExternalUserGUID AS NVARCHAR(60)), CHARINDEX('-', CAST(ExternalUserGUID AS NVARCHAR(60))), LEN(CAST(ExternalUserGUID AS NVARCHAR(60)))))) END
			FROM Users INNER JOIN @Users U ON U.UserID = Users.UserID
			WHERE SourceGUID IS NOT NULL
	END

	IF OBJECT_ID('MasterList') IS NOT NULL
	BEGIN
		UPDATE ML 
			SET ML.OrganizationGUID = O.GUID
		FROM Organizations O
			INNER JOIN MasterList ML ON ML.OrganizationID = O.organizationid
	END

	IF OBJECT_ID('Organizationworkflowstages') IS NOT NULL
	BEGIN
		UPDATE OWF 
			SET OWF.OrgGUID = O.GUID
		FROM Organizations O
			INNER JOIN Organizationworkflowstages OWF ON OWF.OrganizationId = O.organizationid
	END

	IF OBJECT_ID('RuleActions') IS NOT NULL 
	BEGIN
		DECLARE 
			@Total_Count INT, @Count INT=1, @Xml XML ,@AccountName VARCHAR(250),@GUID VARCHAR(1000),
			@GUID1 VARCHAR(1000), @organizationId BIGINT

		SELECT 
			ROW_NUMBER() OVER(ORDER BY r.ruleactionid ) AS Row_Num, RuleActionID, OrganizationId INTO #tab
		FROM 
			RuleActions R
			INNER JOIN RuleConditions RC ON RC.ConditionId=R.ConditionId
			INNER JOIN RULES RU ON RU.RuleId=RC.RuleId 
		WHERE Name = 'Routing'
 
		 SELECT @Total_count=COUNT(1) FROM #tab

		 WHILE(@Total_count>=@count)
		 BEGIN
			
			SELECT @organizationId = OrganizationId FROM #tab WHERE Row_Num = @count

			SELECT @xml=Value
			FROM RuleActions R
				INNER JOIN RuleConditions RC ON RC.ConditionId=R.ConditionId
				INNER JOIN RULES RU ON RU.RuleId=RC.RuleId 
				INNER JOIN #tab T ON T.RuleActionID=R.RuleActionID
			WHERE RU.OrganizationID=@OrganizationID
				  AND Name = 'Routing'  AND T.Row_Num=@COUNT

			SELECT @accountname=a.b.value('@Name','varchar(100)'), @GUID1 =a.b.value('@GUID','varchar(100)')
			FROM @xml.nodes('Routing/RoutingInfo') a(b)

			SELECT 
				@GUID = AccountGUID
			FROM 
				Accounts
			WHERE 
				Accountname = @accountname
				AND organizationId = @organizationId

			UPDATE R 
				SET Value = REPLACE(VALUE,@GUID1,@GUID) 
			FROM RuleActions R
				INNER JOIN RuleConditions RC ON RC.ConditionId=R.ConditionId
				INNER JOIN RULES RU ON RU.RuleId=RC.RuleId 
				INNER JOIN #tab T ON T.RuleActionID=R.RuleActionID
			WHERE RU.OrganizationID=@OrganizationID
				AND Name = 'Routing' AND T.Row_Num=@COUNT

			SELECT @count= MIN(Row_Num) FROM #tab WHERE Row_Num>@count
		END

		DROP TABLE #tab
	END

	IF OBJECT_ID('L2LCONFIGURATIONSUPDTRIGGER') IS NOT NULL 
	BEGIN
		ENABLE TRIGGER [L2LCONFIGURATIONSUPDTRIGGER] ON L2LConfigurations
	END
	IF OBJECT_ID('ORGANIZATIONSUPDTRIGGER') IS NOT NULL 
	BEGIN
		ENABLE TRIGGER [ORGANIZATIONSUPDTRIGGER] ON Organizations
	END
	IF OBJECT_ID('ACCOUNTSUPDTRIGGER') IS NOT NULL 
	BEGIN
		ENABLE TRIGGER [ACCOUNTSUPDTRIGGER] ON Accounts
	END
	IF OBJECT_ID('USERSUPDTRIGGER') IS NOT NULL 
	BEGIN
		ENABLE TRIGGER [USERSUPDTRIGGER] ON Users
	END  
END
GO







	DECLARE @DatabaseName VARCHAR(100)

	SELECT @DatabaseName = DB_NAME() 
	
	EXEC [usp_GUIDMasking] @DatabaseName
	
"@

Write-Host 'Running GUID Masking Script'
Invoke-Sqlcmd -ServerInstance $ServerInstance -Database "$Database" -Credential $Credentials -Query $GuidMaskingScript

